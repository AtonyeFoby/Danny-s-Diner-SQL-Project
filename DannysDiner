**Schema (PostgreSQL v13)**

    CREATE SCHEMA dannys_diner;
    SET search_path = dannys_diner;
    
    CREATE TABLE sales (
      "customer_id" VARCHAR(1),
      "order_date" DATE,
      "product_id" INTEGER
    );
    
    INSERT INTO sales
      ("customer_id", "order_date", "product_id")
    VALUES
      ('A', '2021-01-01', '1'),
      ('A', '2021-01-01', '2'),
      ('A', '2021-01-07', '2'),
      ('A', '2021-01-10', '3'),
      ('A', '2021-01-11', '3'),
      ('A', '2021-01-11', '3'),
      ('B', '2021-01-01', '2'),
      ('B', '2021-01-02', '2'),
      ('B', '2021-01-04', '1'),
      ('B', '2021-01-11', '1'),
      ('B', '2021-01-16', '3'),
      ('B', '2021-02-01', '3'),
      ('C', '2021-01-01', '3'),
      ('C', '2021-01-01', '3'),
      ('C', '2021-01-07', '3');
     
    
    CREATE TABLE menu (
      "product_id" INTEGER,
      "product_name" VARCHAR(5),
      "price" INTEGER
    );
    
    INSERT INTO menu
      ("product_id", "product_name", "price")
    VALUES
      ('1', 'sushi', '10'),
      ('2', 'curry', '15'),
      ('3', 'ramen', '12');
      
    
    CREATE TABLE members (
      "customer_id" VARCHAR(1),
      "join_date" DATE
    );
    
    INSERT INTO members
      ("customer_id", "join_date")
    VALUES
      ('A', '2021-01-07'),
      ('B', '2021-01-09');

---
-- 1. What is the total amount each customer spent at the restaurant?
**Query #1**

    SELECT s.customer_id, SUM(m.price)
    FROM dannys_diner.sales s
    JOIN dannys_diner.menu m
    ON s.product_id = m.product_id
    GROUP BY 1
    ORDER BY 1;

| customer_id | sum |
| ----------- | --- |
| A           | 76  |
| B           | 74  |
| C           | 36  |

---
-- 2. How many days has each customer visited the restaurant?
**Query #2**

    SELECT customer_id, COUNT(order_date)
    FROM dannys_diner.sales
    GROUP BY 1
    ORDER BY 1;

| customer_id | count |
| ----------- | ----- |
| A           | 6     |
| B           | 6     |
| C           | 3     |

---
-- 3. What was the first item from the menu purchased by each customer?
**Query #3**

    SELECT *
    FROM
       (SELECT s.customer_id, m.product_name, s.order_date,
    RANK() OVER (PARTITION BY s.customer_id ORDER BY s.order_date) order_rank
    FROM dannys_diner.sales s
    JOIN dannys_diner.menu m
    ON s.product_id = m.product_id) sub
    WHERE order_rank = 1;

| customer_id | product_name | order_date               | order_rank |
| ----------- | ------------ | ------------------------ | ---------- |
| A           | curry        | 2021-01-01T00:00:00.000Z | 1          |
| A           | sushi        | 2021-01-01T00:00:00.000Z | 1          |
| B           | curry        | 2021-01-01T00:00:00.000Z | 1          |
| C           | ramen        | 2021-01-01T00:00:00.000Z | 1          |
| C           | ramen        | 2021-01-01T00:00:00.000Z | 1          |

---
-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?
**Query #4**

    SELECT m.product_name, COUNT(order_date) AS order_count
    FROM dannys_diner.sales s
    JOIN dannys_diner.menu m 
    ON s.product_id = m.product_id
    GROUP BY 1
    ORDER BY 2 DESC
    LIMIT 1;

| product_name | order_count |
| ------------ | ----------- |
| ramen        | 8           |

---
-- 5. Which item was the most popular for each customer?
**Query #5**

    SELECT*
    FROM
    (
      SELECT s.customer_id, m.product_name, COUNT(s.product_id),
    RANK() OVER (PARTITION BY s.customer_id ORDER BY COUNT(s.product_id) DESC ) AS rank
    FROM dannys_diner.sales s
    JOIN dannys_diner.menu m
    ON s.product_id = m.product_id
    GROUP BY 1, 2
    ORDER BY 1, 3 DESC
    ) sub2
    WHERE rank = 1;

| customer_id | product_name | count | rank |
| ----------- | ------------ | ----- | ---- |
| A           | ramen        | 3     | 1    |
| B           | ramen        | 2     | 1    |
| B           | curry        | 2     | 1    |
| B           | sushi        | 2     | 1    |
| C           | ramen        | 3     | 1    |

---
-- 6. Which item was purchased first by the customer after they became a member?
**Query #6**

    SELECT *
    FROM 
    (
    SELECT s.customer_id, s.order_date, m.product_name, me.join_date,
    RANK() OVER(PARTITION BY s.customer_id ORDER BY s.order_date) AS rank
    FROM dannys_diner.sales s
    JOIN dannys_diner.members me
    ON s.customer_id = me.customer_id
    JOIN dannys_diner.menu m
    ON s.product_id = m.product_id
    WHERE s.order_date >= me.join_date) sub3
    WHERE rank = 1;

| customer_id | order_date               | product_name | join_date                | rank |
| ----------- | ------------------------ | ------------ | ------------------------ | ---- |
| A           | 2021-01-07T00:00:00.000Z | curry        | 2021-01-07T00:00:00.000Z | 1    |
| B           | 2021-01-11T00:00:00.000Z | sushi        | 2021-01-09T00:00:00.000Z | 1    |

---
-- 7. Which item was purchased just before the customer became a member?
**Query #7**

    SELECT*
    FROM
    (
      SELECT s.customer_id, s.order_date, m.product_name, me.join_date,
      RANK() OVER(PARTITION BY s.customer_id ORDER BY s.order_date DESC) AS rank
      FROM dannys_diner.sales s
      JOIN dannys_diner.members me
      ON s.customer_id = me.customer_id
      JOIN dannys_diner.menu m
      ON s.product_id = m.product_id
      WHERE s.order_date < me.join_date
    ) sub4
    WHERE rank = 1;

| customer_id | order_date               | product_name | join_date                | rank |
| ----------- | ------------------------ | ------------ | ------------------------ | ---- |
| A           | 2021-01-01T00:00:00.000Z | sushi        | 2021-01-07T00:00:00.000Z | 1    |
| A           | 2021-01-01T00:00:00.000Z | curry        | 2021-01-07T00:00:00.000Z | 1    |
| B           | 2021-01-04T00:00:00.000Z | sushi        | 2021-01-09T00:00:00.000Z | 1    |

---
-- 8. What is the total items and amount spent for each member before they became a member?
**Query #8**

    SELECT s.customer_id, COUNT(s.product_id), SUM(m.price)
     FROM dannys_diner.sales s
     JOIN dannys_diner.menu m
     ON s.product_id = m.product_id
     JOIN dannys_diner.members me
     ON s.customer_id = me.customer_id
     WHERE s.order_date < me.join_date
     GROUP BY 1
     ORDER BY 1;

| customer_id | count | sum |
| ----------- | ----- | --- |
| A           | 2     | 25  |
| B           | 3     | 40  |

---
-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
**Query #9**

    SELECT s.customer_id,
        	   SUM(CASE WHEN m.product_id = 1
            	 THEN price*20
                 ELSE price*10
                 END) AS points
        FROM dannys_diner.sales s
        JOIN dannys_diner.menu m
        ON s.product_id = m.product_id
        GROUP BY 1
        ORDER BY 1;

| customer_id | points |
| ----------- | ------ |
| A           | 860    |
| B           | 940    |
| C           | 360    |

---
-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?
**Query #10**

    SELECT s.customer_id, 
    SUM(CASE WHEN s.product_id IN (1,2,3) AND s.order_date - me.join_date >= 0 AND s.order_date - me.join_date < 7 THEN m.price*20
    WHEN s.product_id = 1 AND s.order_date - me.join_date >= 7 THEN m.price*20
    WHEN s.product_id IN (2,3) AND s.order_date - me.join_date >=7 THEN m.price*10
    WHEN s.product_id = 1 AND s.order_date - me.join_date < 0 THEN m.price*20
    ELSE m.price*10
    END) AS points
    FROM dannys_diner.sales s
    JOIN dannys_diner.menu m
    ON s.product_id = m.product_id 
    JOIN dannys_diner.members me
    ON s.customer_id = me.customer_id
    GROUP BY 1;

| customer_id | points |
| ----------- | ------ |
| A           | 1370   |
| B           | 940    |

---

[View on DB Fiddle](https://www.db-fiddle.com/f/2rM8RAnq7h5LLDTzZiRWcd/2504)
